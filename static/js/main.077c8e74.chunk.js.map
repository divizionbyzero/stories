{"version":3,"sources":["components/card/card.tsx","components/card-list/card-list.tsx","components/search-box/search-box.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","className","alt","src","user","id","name","username","href","email","CardList","users","map","item","key","SearchBox","type","placeholder","onChange","handleChange","App","state","userList","searchField","fetch","then","response","json","setState","this","filteredList","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAceA,G,MAXF,SAACC,GACb,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACnB,4BAAKL,EAAMI,KAAKE,MAChB,8BAAON,EAAMI,KAAKG,UAClB,uBAAGC,KAAI,iBAAYR,EAAMI,KAAKK,QAAUT,EAAMI,KAAKK,UCKvCC,G,MAVE,SAASV,GACzB,OACC,yBAAKC,UAAU,aACbD,EAAMW,MAAMC,KAAI,SAASC,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAID,KAAMS,UCOtBE,G,MAZG,SAACf,GAClB,OACC,2BACUC,UAAU,SACnBI,GAAG,SACHW,KAAK,OACLC,YAAajB,EAAMiB,YACnBC,SAAUlB,EAAMmB,iBCuBJC,G,kBA3Bd,WAAYpB,GAAa,IAAD,8BACvB,4CAAMA,KACDqB,MAAQ,CACTC,SAAU,GACVC,YAAa,IAJM,E,kFAQF,IAAD,OACpBC,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACd,GAC7F,EAAKiB,SAAS,CAAEN,SAAUX,S,+BAIlB,IAAD,SAC4BkB,KAAKR,MAA/BC,EADF,EACEA,SAAUC,EADZ,EACYA,YACZO,EAAeR,EAASS,QAAO,SAAClB,GAAD,OAAeA,EAAKP,KAAK0B,cAAcC,SAASV,EAAYS,kBACnG,OACC,6BACC,iDACI,kBAAC,EAAD,CAAWf,YAAY,SAASE,aAAc,SAACe,GAAD,OAAY,EAAKN,SAAS,CAACL,YAAaW,EAAEC,OAAOC,WACnG,kBAAC,EAAD,CAAUzB,MAAOmB,S,GAtBHO,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.077c8e74.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst Card = (props: any) => {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<img alt=\"user\" src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`} />\n\t\t\t<h2>{props.user.name}</h2>\n\t\t\t<span>{props.user.username}</span>\n\t\t\t<a href={`mailto:${props.user.email}`}>{props.user.email}</a>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card';\nimport './card-list.css';\n\nconst CardList = function(props: any) {\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{props.users.map(function(item: any) {\n\t\t\t\treturn <Card key={item.id} user={item} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\nimport './search-box.css';\n\nconst SearchBox = (props: any) => {\n\treturn (\n\t\t<input\n            className='search'\n\t\t\tid='search'\n\t\t\ttype='text'\n\t\t\tplaceholder={props.placeholder}\n\t\t\tonChange={props.handleChange}\n\t\t/>\n\t);\n};\n\nexport default SearchBox;","import React from 'react';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends React.Component<any, any> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n      userList: [],\n      searchField: ''\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then((response) => response.json()).then((users) => {\n\t\t\tthis.setState({ userList: users });\n\t\t});\n\t}\n\n\trender() {\n    const { userList, searchField } = this.state;\n    const filteredList = userList.filter((item: any) => item.name.toLowerCase().includes(searchField.toLowerCase()));\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>My Hacker Stories</h1>\n        <SearchBox placeholder='search' handleChange={(e: any) => this.setState({searchField: e.target.value})} />\n\t\t\t\t<CardList users={filteredList} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}